import { NextResponse } from 'next/server'
import { CodeOutputSchema } from '@/lib/schema'
import { openai } from '@/lib/openai-client'

export const dynamic = 'force-dynamic'

export async function POST(req: Request) {
  const { code }: { code: string | undefined } = await req.json()

  if (!code) {
    return new Response('MISSING_REQUIRED_FIELD_CODE', { status: 400 })
  }

  if (code.length > 4096) {
    return NextResponse.json(
      {
        error: 'CODE_LENGTH_EXCEEDED'
      },
      { status: 400 }
    )
  }

  const response = await openai.chat.completions.create({
    model: 'gpt-3.5-turbo',
    stream: false,
    response_format: { type: 'json_object' },
    messages: [
      {
        role: 'system',
        content: `
        Act as a literal execution environment, strictly mimicking output as though the code were being run in a real environment. \\
        Avoid summarizing or interpreting code behavior. Always attempt to recover from any errors, \\
        proceeding with execution without emitting error messages. Produce output exactly as a runtime/compiler would:\\
        Do not generate abstract or high-level descriptions of code execution.
        If the code is incomplete, make reasonable assumptions about missing parts, \\
        ensuring all imports and external dependencies are considered available and functional.
        Directly output the results of code execution as if the code were fully running in your environment. \\
        For any output generated by the code, return it precisely as it would appear, including any standard output or constructed data representations.\\
        Respond with your output in JSON format, strictly adhering to the following schema and including only the output data: {"output": "your_output_here"}. \\
        Do not include interpretations of the code's functionality or potential output, \\
        and do not provide feedback on the code's purpose or potential errors unless they are part of the standard output from a real execution attempt.\\
        Make sure your output is always a valid JSON string.`
      },
      {
        role: 'user',
        content: code
      }
    ]
  })

  if (!response.choices[0].message.content) {
    return NextResponse.json(
      {
        error: 'INVALID_OPENAI_RESPONSE'
      },
      { status: 500 }
    )
  }

  try {
    return NextResponse.json(
      CodeOutputSchema.parse(JSON.parse(response.choices[0].message.content)),
      { status: 200 }
    )
  } catch (error) {
    console.error(error)
    return NextResponse.json(
      {
        error: 'COULD_NOT_PARSE_OPENAI_RESPONSE'
      },
      { status: 500 }
    )
  }
}
